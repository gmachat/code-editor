[{"/Users/greg/Desktop/CodeRoomFrontend/coderoomfrontend/src/index.js":"1","/Users/greg/Desktop/CodeRoomFrontend/coderoomfrontend/src/App.js":"2","/Users/greg/Desktop/CodeRoomFrontend/coderoomfrontend/src/reportWebVitals.js":"3","/Users/greg/Desktop/CodeRoomFrontend/coderoomfrontend/src/components/Compiler.js":"4","/Users/greg/Desktop/CodeRoomFrontend/coderoomfrontend/src/components/TextEditor/TextEditor.js":"5"},{"size":500,"mtime":1619715424172,"results":"6","hashOfConfig":"7"},{"size":467,"mtime":1619804419255,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1619715424173,"results":"9","hashOfConfig":"7"},{"size":4870,"mtime":1619804840827,"results":"10","hashOfConfig":"7"},{"size":3720,"mtime":1619805689738,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"vl3m6q",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"/Users/greg/Desktop/CodeRoomFrontend/coderoomfrontend/src/index.js",[],["25","26"],"/Users/greg/Desktop/CodeRoomFrontend/coderoomfrontend/src/App.js",[],"/Users/greg/Desktop/CodeRoomFrontend/coderoomfrontend/src/reportWebVitals.js",[],"/Users/greg/Desktop/CodeRoomFrontend/coderoomfrontend/src/components/Compiler.js",["27","28","29"],"\nimport React, { Component, useState } from \"react\";\nimport \"./Compiler.css\";\nimport TextEditor from '../components/TextEditor/TextEditor'\n\n\nconst API_KEY = process.env.REACT_APP_JUDGE0_KEY\n\n\nconst Compiler = () => {\n\n  const [input, setInput] = useState('');\n  const [output, setOutput] = useState('');\n  const [language_id, setLanguage_id] = useState(71);\n  const [user_input, setUser_input] = useState('');\n\n\n\n  const submit = async (e) => {\n    e.preventDefault();\n    let outputText = document.getElementById(\"output\");\n    outputText.innerHTML = \"\";\n    outputText.innerHTML += \"Creating Submission ...\\n\";\n\n\n    const response = await fetch(\n      \"https://judge0-ce.p.rapidapi.com/submissions/?base64_encoded=false&wait=false\",\n      {\n        method: \"POST\",\n        headers: {\n          \"x-rapidapi-host\": \"judge0-ce.p.rapidapi.com\",\n          \"x-rapidapi-key\": API_KEY, \n          \"Content-Type\": \"application/json\",\n          \"useQueryString\": true\n        },\n        body: JSON.stringify({\n          source_code: input,\n          stdin: user_input,\n          language_id: language_id,\n        }),\n      }\n    );\n    outputText.innerHTML += \"Submission Created ...\\n\";\n    const jsonResponse = await response.json();\n    console.log(jsonResponse)\n\n\n    let jsonGetSolution = {\n      status: { description: \"Queue\" },\n      stderr: null,\n      compile_output: null,\n    };\n\n\n\n    \n    while (\n      jsonGetSolution.status.description !== \"Accepted\" &&\n      jsonGetSolution.stderr == null &&\n      jsonGetSolution.compile_output == null\n    ) {\n\n      outputText.innerHTML = `Creating Submission ... \\nSubmission Created ...\\nChecking Submission Status\\nstatus : ${jsonGetSolution.status.description}`;\n      if (jsonResponse.token) {\n        let url = `https://judge0-ce.p.rapidapi.com/submissions/${jsonResponse.token}?base64_encoded=true`;\n\n        const getSolution = await fetch(url, {\n          method: \"GET\",\n          headers: {\n            \"x-rapidapi-host\": \"judge0-ce.p.rapidapi.com\",\n            \"x-rapidapi-key\": API_KEY,\n            \"Content-Type\": \"application/json\",\n          },\n        });\n\n\n        jsonGetSolution = await getSolution.json();\n        console.log('jsongetsolution', jsonGetSolution)\n      }\n    }\n    console.log('here')\n    if (jsonGetSolution.stdout) {\n      const outputSolution = atob(jsonGetSolution.stdout);\n\n      outputText.innerHTML = \"\";\n\n      outputText.innerHTML += `Results : ${outputSolution}\\nExecution Time : ${jsonGetSolution.time} Secs\\nMemory used : ${jsonGetSolution.memory} bytes`;\n    } else if (jsonGetSolution.stderr) {\n      const error = atob(jsonGetSolution.stderr);\n\n      outputText.innerHTML = \"\";\n\n      outputText.innerHTML += `\\n Error :${error}`;\n    } else {\n      const compilation_error = atob(jsonGetSolution.compile_output);\n\n      outputText.innerHTML = \"\";\n\n      outputText.innerHTML += `\\n Error :${compilation_error}`;\n    }\n  };\n\n    return (\n      <>\n        <div className=\"ide-grid\">\n          <div className=\"user-input-section\">\n            <label for=\"solution \">\n              <span className=\"badge badge-info heading mt-2 \">\n                <i className=\"\"></i> Code Here\n              </span>\n            </label>\n            <TextEditor fieldName={'solution'} fieldId={'source'} onChangeFunction={setInput} classNames=\"source\"/>\n\n\n            <button\n              type=\"submit\"\n              className=\"btn btn-danger ml-2 mr-2 \"\n              onClick={(event) => submit(event)}\n            >\n              <i class=\"fas fa-cog fa-fw\"></i> Run\n            </button>\n\n            <label for=\"tags\" className=\"mr-1\">\n              <b className=\"heading\">Language:</b>\n            </label>\n            <select\n              value={language_id}\n              onChange={(event) => setLanguage_id(event.target.value)}\n              id=\"tags\"\n              className=\"form-control form-inline mb-2 language\"\n            >\n              <option value=\"63\">Javascript</option>\n              <option value=\"75\">C</option>\n              <option value=\"54\">C++</option>\n              <option value=\"62\">Java</option>\n              <option value=\"71\">Python</option>\n            </select>\n          </div>\n          <div className=\"col-5\">\n            <div>\n              <span className=\"badge badge-info heading my-2 \">\n                <i className=\"fas fa-exclamation fa-fw fa-md\"></i> Output\n              </span>\n              <textarea id=\"output\"></textarea>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"mt-2 ml-5\">\n          <span className=\"badge badge-primary heading my-2 \">\n            <i className=\"fas fa-user fa-fw fa-md\"></i> User Input\n          </span>\n          <br />\n          <textarea id=\"input\" onChange={(event) => setUser_input(event.target.value)}></textarea>\n        </div>\n      </>\n    );\n  \n}\n\nexport default Compiler","/Users/greg/Desktop/CodeRoomFrontend/coderoomfrontend/src/components/TextEditor/TextEditor.js",["30","31","32"],"import { useCallback, useEffect, useState } from \"react\"\nimport Quill from \"quill\"\nimport \"quill/dist/quill.snow.css\"\nimport { io } from \"socket.io-client\"\nimport { useParams } from \"react-router-dom\"\n\nconst SAVE_INTERVAL_MS = 2000\n\n\nexport default function TextEditor({fieldName, fieldId, onChangeFunction, classNames}) {\n  const { id: documentId } = useParams()\n  const [socket, setSocket] = useState()\n  const [quill, setQuill] = useState()\n  console.log(documentId)\n\n  useEffect(() => {\n    if(socket == null || quill == null) return\n\n    socket.once(\"load-document\", document => {\n      quill.setContents(document)\n      quill.enable()\n    })\n\n    socket.emit('get-document', documentId)\n  }, [socket, quill, documentId])\n\n  useEffect(() => {\n    const s = io(\"http://localhost:3001\")\n    setSocket(s)\n\n    return () => {\n      s.disconnect()\n    }\n  }, [])\n\n  useEffect(() => {\n    //use for receiving information from server\n    if(socket == null || quill == null) return \n\n    const handler = (delta) => {\n      quill.updateContents(delta)\n    }\n\n    socket.on('receive-changes', handler)\n\n    return () => {\n      socket.off('receive-changes', handler)\n    }\n  }, [socket, quill])\n\n  useEffect(() => {\n    //use for sending information from server\n\n    if(socket == null || quill == null) return \n    \n    const handler = (delta, oldDelta, source) => {\n      //onChangeFunction is a prop passed in to that is a \"setState\" hook to update values from the collabrative text environment\n      onChangeFunction(document.getElementById(fieldId).children[0].firstChild.innerText)\n      if (source !== 'user') return \n      socket.emit(\"send-changes\", delta)\n    }\n\n    quill.on('text-change', handler)\n\n    return () => {\n      quill.off('text-change', handler)\n    }\n  }, [quill, socket])\n\n  // useEffect(() => {\n  //   if (socket == null || quill == null) return\n\n  //   // socket.once(\"load-document\"\n  //   // , document => {\n  //   //   quill.setContents(document)\n  //   //   quill.enable()\n  //   // }\n  //   // )\n\n  //   // socket.emit(\"get-document\", documentId)\n  // }, [socket, quill, documentId])\n\n  // useEffect(() => {\n  //   if (socket == null || quill == null) return\n\n  //   // const interval = setInterval(() => {\n  //     // socket.emit(\"save-document\", quill.getContents())\n  //   // }, SAVE_INTERVAL_MS)\n\n  //   // return () => {\n  //   //   clearInterval(interval)\n  //   // }\n  // }, [socket, quill])\n\n  // useEffect(() => {\n  //   if (socket == null || quill == null) return\n\n  //   const handler = delta => {\n  //     quill.updateContents(delta)\n  //   }\n  //   socket.on(\"receive-changes\", handler)\n\n  //   return () => {\n  //     socket.off(\"receive-changes\", handler)\n  //   }\n  // }, [socket, quill])\n\n  // useEffect(() => {\n  //   if (socket == null || quill == null) return\n\n  //   const handler = (delta, oldDelta, source) => {\n  //     if (source !== \"user\") return\n  //     socket.emit(\"send-changes\", delta)\n  //   }\n  //   quill.on(\"text-change\", handler)\n\n  //   return () => {\n  //     quill.off(\"text-change\", handler)\n  //   }\n  // }, [socket, quill])\n\n  const wrapperRef = useCallback(wrapper => {\n    if (wrapper == null) return\n\n    wrapper.innerHTML = \"\"\n    const editor = document.createElement(\"div\")\n    editor.setAttribute('name', fieldName) \n    editor.setAttribute('id', fieldId)\n    editor.setAttribute('class', classNames)\n    editor.addEventListener('onchange', (e) => onChangeFunction(e))\n\n    wrapper.append(editor)\n    const q = new Quill(editor, {\n      \"modules\": {\n      \"toolbar\": false\n  }\n    })\n    q.disable()\n    q.setText(\"Loading...\")\n\n    setQuill(q)\n\n  }, [])\n  return <div \n        className={\"container\"} \n        ref={wrapperRef}>\n  </div>\n  \n}\n",{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":2,"column":17,"nodeType":"39","messageId":"40","endLine":2,"endColumn":26},{"ruleId":"37","severity":1,"message":"41","line":13,"column":10,"nodeType":"39","messageId":"40","endLine":13,"endColumn":16},{"ruleId":"37","severity":1,"message":"42","line":13,"column":18,"nodeType":"39","messageId":"40","endLine":13,"endColumn":27},{"ruleId":"37","severity":1,"message":"43","line":7,"column":7,"nodeType":"39","messageId":"40","endLine":7,"endColumn":23},{"ruleId":"44","severity":1,"message":"45","line":68,"column":6,"nodeType":"46","endLine":68,"endColumn":21,"suggestions":"47"},{"ruleId":"44","severity":1,"message":"48","line":143,"column":6,"nodeType":"46","endLine":143,"endColumn":8,"suggestions":"49"},"no-native-reassign",["50"],"no-negated-in-lhs",["51"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'output' is assigned a value but never used.","'setOutput' is assigned a value but never used.","'SAVE_INTERVAL_MS' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fieldId' and 'onChangeFunction'. Either include them or remove the dependency array. If 'onChangeFunction' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["52"],"React Hook useCallback has missing dependencies: 'classNames', 'fieldId', 'fieldName', and 'onChangeFunction'. Either include them or remove the dependency array. If 'onChangeFunction' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["53"],"no-global-assign","no-unsafe-negation",{"desc":"54","fix":"55"},{"desc":"56","fix":"57"},"Update the dependencies array to be: [fieldId, onChangeFunction, quill, socket]",{"range":"58","text":"59"},"Update the dependencies array to be: [classNames, fieldId, fieldName, onChangeFunction]",{"range":"60","text":"61"},[1775,1790],"[fieldId, onChangeFunction, quill, socket]",[3628,3630],"[classNames, fieldId, fieldName, onChangeFunction]"]