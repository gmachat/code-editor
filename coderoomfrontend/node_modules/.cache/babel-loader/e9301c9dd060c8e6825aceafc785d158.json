{"ast":null,"code":"var _jsxFileName = \"/Users/greg/Desktop/CodeRoomFrontend/coderoomfrontend/src/components/TextEditor/TextEditor.js\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from \"react\";\nimport Quill from \"quill\";\nimport \"quill/dist/quill.snow.css\";\nimport { io } from \"socket.io-client\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SAVE_INTERVAL_MS = 2000;\nexport default function TextEditor({\n  fieldName,\n  fieldId,\n  onChangeFunction,\n  classNames\n}) {\n  _s();\n\n  const {\n    id: documentId\n  } = useParams();\n  const [socket, setSocket] = useState();\n  const [quill, setQuill] = useState();\n  console.log(documentId);\n  useEffect(() => {\n    if (socket == null || quill == null) return;\n    socket.emit('get-document', documentId);\n  }, [socket, quill, documentId]);\n  useEffect(() => {\n    const s = io(\"http://localhost:3001\");\n    setSocket(s);\n    return () => {\n      s.disconnect();\n    };\n  }, []);\n  useEffect(() => {\n    //use for receiving information from server\n    if (socket == null || quill == null) return;\n\n    const handler = delta => {\n      quill.updateContents(delta);\n    };\n\n    socket.on('receive-changes', handler);\n    return () => {\n      socket.off('receive-changes', handler);\n    };\n  }, [socket, quill]);\n  useEffect(() => {\n    //use for sending information from server\n    if (socket == null || quill == null) return;\n\n    const handler = (delta, oldDelta, source) => {\n      //onChangeFunction is a prop passed in to that is a \"setState\" hook to update values from the collabrative text environment\n      onChangeFunction(document.getElementById(fieldId).children[0].firstChild.innerText);\n      if (source !== 'user') return;\n      socket.emit(\"send-changes\", delta);\n    };\n\n    quill.on('text-change', handler);\n    return () => {\n      quill.off('text-change', handler);\n    };\n  }, [quill, socket]); // useEffect(() => {\n  //   if (socket == null || quill == null) return\n  //   // socket.once(\"load-document\"\n  //   // , document => {\n  //   //   quill.setContents(document)\n  //   //   quill.enable()\n  //   // }\n  //   // )\n  //   // socket.emit(\"get-document\", documentId)\n  // }, [socket, quill, documentId])\n  // useEffect(() => {\n  //   if (socket == null || quill == null) return\n  //   // const interval = setInterval(() => {\n  //     // socket.emit(\"save-document\", quill.getContents())\n  //   // }, SAVE_INTERVAL_MS)\n  //   // return () => {\n  //   //   clearInterval(interval)\n  //   // }\n  // }, [socket, quill])\n  // useEffect(() => {\n  //   if (socket == null || quill == null) return\n  //   const handler = delta => {\n  //     quill.updateContents(delta)\n  //   }\n  //   socket.on(\"receive-changes\", handler)\n  //   return () => {\n  //     socket.off(\"receive-changes\", handler)\n  //   }\n  // }, [socket, quill])\n  // useEffect(() => {\n  //   if (socket == null || quill == null) return\n  //   const handler = (delta, oldDelta, source) => {\n  //     if (source !== \"user\") return\n  //     socket.emit(\"send-changes\", delta)\n  //   }\n  //   quill.on(\"text-change\", handler)\n  //   return () => {\n  //     quill.off(\"text-change\", handler)\n  //   }\n  // }, [socket, quill])\n\n  const wrapperRef = useCallback(wrapper => {\n    if (wrapper == null) return;\n    wrapper.innerHTML = \"\";\n    const editor = document.createElement(\"div\");\n    editor.setAttribute('name', fieldName);\n    editor.setAttribute('id', fieldId);\n    editor.setAttribute('class', classNames);\n    editor.addEventListener('onchange', e => onChangeFunction(e));\n    wrapper.append(editor);\n    const q = new Quill(editor, {\n      \"modules\": {\n        \"toolbar\": false\n      }\n    }); // q.disable()\n    // q.setText(\"Loading...\")\n    //set state of code in text here e.g. [inputText, setInputText ] = useSta\n\n    setQuill(q);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    ref: wrapperRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 10\n  }, this);\n}\n\n_s(TextEditor, \"sKz52VHZRZA0qSY0BPF3MKJPQxI=\", false, function () {\n  return [useParams];\n});\n\n_c = TextEditor;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextEditor\");","map":{"version":3,"sources":["/Users/greg/Desktop/CodeRoomFrontend/coderoomfrontend/src/components/TextEditor/TextEditor.js"],"names":["useCallback","useEffect","useState","Quill","io","useParams","SAVE_INTERVAL_MS","TextEditor","fieldName","fieldId","onChangeFunction","classNames","id","documentId","socket","setSocket","quill","setQuill","console","log","emit","s","disconnect","handler","delta","updateContents","on","off","oldDelta","source","document","getElementById","children","firstChild","innerText","wrapperRef","wrapper","innerHTML","editor","createElement","setAttribute","addEventListener","e","append","q"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useState } from \"react\"\nimport Quill from \"quill\"\nimport \"quill/dist/quill.snow.css\"\nimport { io } from \"socket.io-client\"\nimport { useParams } from \"react-router-dom\"\n\nconst SAVE_INTERVAL_MS = 2000\n\n\nexport default function TextEditor({fieldName, fieldId, onChangeFunction, classNames}) {\n  const { id: documentId } = useParams()\n  const [socket, setSocket] = useState()\n  const [quill, setQuill] = useState()\n  console.log(documentId)\n\n  useEffect(() => {\n    if(socket == null || quill == null) return\n\n    socket.emit('get-document', documentId)\n  }, [socket, quill, documentId])\n\n  useEffect(() => {\n    const s = io(\"http://localhost:3001\")\n    setSocket(s)\n\n    return () => {\n      s.disconnect()\n    }\n  }, [])\n\n  useEffect(() => {\n    //use for receiving information from server\n    if(socket == null || quill == null) return \n\n    const handler = (delta) => {\n      quill.updateContents(delta)\n    }\n\n    socket.on('receive-changes', handler)\n\n    return () => {\n      socket.off('receive-changes', handler)\n    }\n  }, [socket, quill])\n\n  useEffect(() => {\n    //use for sending information from server\n\n    if(socket == null || quill == null) return \n    \n    const handler = (delta, oldDelta, source) => {\n      //onChangeFunction is a prop passed in to that is a \"setState\" hook to update values from the collabrative text environment\n      onChangeFunction(document.getElementById(fieldId).children[0].firstChild.innerText)\n      if (source !== 'user') return \n      socket.emit(\"send-changes\", delta)\n    }\n\n    quill.on('text-change', handler)\n\n    return () => {\n      quill.off('text-change', handler)\n    }\n  }, [quill, socket])\n\n  // useEffect(() => {\n  //   if (socket == null || quill == null) return\n\n  //   // socket.once(\"load-document\"\n  //   // , document => {\n  //   //   quill.setContents(document)\n  //   //   quill.enable()\n  //   // }\n  //   // )\n\n  //   // socket.emit(\"get-document\", documentId)\n  // }, [socket, quill, documentId])\n\n  // useEffect(() => {\n  //   if (socket == null || quill == null) return\n\n  //   // const interval = setInterval(() => {\n  //     // socket.emit(\"save-document\", quill.getContents())\n  //   // }, SAVE_INTERVAL_MS)\n\n  //   // return () => {\n  //   //   clearInterval(interval)\n  //   // }\n  // }, [socket, quill])\n\n  // useEffect(() => {\n  //   if (socket == null || quill == null) return\n\n  //   const handler = delta => {\n  //     quill.updateContents(delta)\n  //   }\n  //   socket.on(\"receive-changes\", handler)\n\n  //   return () => {\n  //     socket.off(\"receive-changes\", handler)\n  //   }\n  // }, [socket, quill])\n\n  // useEffect(() => {\n  //   if (socket == null || quill == null) return\n\n  //   const handler = (delta, oldDelta, source) => {\n  //     if (source !== \"user\") return\n  //     socket.emit(\"send-changes\", delta)\n  //   }\n  //   quill.on(\"text-change\", handler)\n\n  //   return () => {\n  //     quill.off(\"text-change\", handler)\n  //   }\n  // }, [socket, quill])\n\n  const wrapperRef = useCallback(wrapper => {\n    if (wrapper == null) return\n\n    wrapper.innerHTML = \"\"\n    const editor = document.createElement(\"div\")\n    editor.setAttribute('name', fieldName) \n    editor.setAttribute('id', fieldId)\n    editor.setAttribute('class', classNames)\n    editor.addEventListener('onchange', (e) => onChangeFunction(e))\n\n    wrapper.append(editor)\n    const q = new Quill(editor, {\n      \"modules\": {\n      \"toolbar\": false\n  }\n    })\n    // q.disable()\n    // q.setText(\"Loading...\")\n\n    //set state of code in text here e.g. [inputText, setInputText ] = useSta\n\n\n    setQuill(q)\n\n  }, [])\n  return <div \n        className={\"container\"} \n        ref={wrapperRef}>\n  </div>\n  \n}\n"]},"metadata":{},"sourceType":"module"}